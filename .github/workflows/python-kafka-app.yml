name: python-kafka-app

on: [push]

env:
  TOPIC: test1
  CONFLUENT_BOOTSTRAP_SERVERS: ${{ secrets.CONFLUENT_BOOTSTRAP_SERVERS }}
  CONFLUENT_API_KEY: ${{ secrets.CONFLUENT_API_KEY }}
  CONFLUENT_API_SECRET: ${{ secrets.CONFLUENT_API_SECRET }}
  # Confluent Cloud Schema Registry and AVRO
  TOPIC_AVRO: test2-avro
  CONFLUENT_SCHEMA_REGISTRY_URL: ${{ secrets.CONFLUENT_SCHEMA_REGISTRY_URL }}
  CONFLUENT_BASIC_AUTH_USER_INFO: ${{ secrets.CONFLUENT_BASIC_AUTH_USER_INFO }}

jobs:

  build:

    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.actor }}/python-app:latest

  unit:

    needs: build

    runs-on: ubuntu-latest

    container:
      image: ghcr.io/ybyzek/python-app:latest
      env:
        CONFIG: librdkafka.unit.config
        TOPIC: ${TOPIC}
      credentials:
        username: ybyzek
        password: ${{ secrets.GITHUB_TOKEN }}

    steps:

      - name: Run Kafka client app to local cluster
        run: |
           ls /
           ls -alrt /producer.py
           ./producer.py -f $CONFIG -t $TOPIC
           timeout 10s ./consumer.py -f $CONFIG -t $TOPIC

  local:

    needs: unit

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - name: Build Docker image for Kafka client app to local Kafka cluster
        run: docker build --build-arg CONFIG=librdkafka.local.config --build-arg TOPIC=$TOPIC -t python-app .

      - name: Get cp-all-in-one
        uses: wei/wget@v1
        with:
          args: -O docker-compose.yml https://raw.githubusercontent.com/confluentinc/cp-all-in-one/latest/cp-all-in-one/docker-compose.yml

      - name: Start local Kafka cluster
        run: docker-compose up -d zookeeper broker

      - name: Sleep for 20 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'

      - name: Run Kafka client app to local cluster
        run: docker run -t --net kafka-github-actions_default --name my-python-app --rm python-app || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

      - name: Test message count
        run: tests/local.sh $TOPIC

  ccloud:

    needs: local

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: franzbischoff/replace_envs@v1
        with:
          from_file: 'librdkafka.ccloud.config'
          to_file: 'librdkafka.ccloud.config'
          commit: 'false'

      - name: Build Docker image for Kafka client app to Confluent Cloud
        run: docker build --build-arg CONFIG=librdkafka.ccloud.config --build-arg TOPIC=$TOPIC -t python-app .

      - name: Run Kafka client app to Confluent Cloud
        run: docker run -t --name my-python-app --rm python-app || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

      - name: Test message count
        run: tests/ccloud.sh $TOPIC

  ccloud-avro:

    needs: ccloud

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: franzbischoff/replace_envs@v1
        with:
          from_file: 'librdkafka.ccloud-avro.config'
          to_file: 'librdkafka.ccloud-avro.config'
          commit: 'false'

      - name: Build Docker image for Kafka client app to Confluent Cloud
        run: docker build --build-arg CONFIG=librdkafka.ccloud-avro.config --build-arg TOPIC=$TOPIC_AVRO -t python-app -f Dockerfile-avro .

      - name: Run Kafka client app to Confluent Cloud
        run: docker run -t --name my-python-app --rm python-app || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

      - name: Test message count
        run: tests/ccloud-avro.sh $TOPIC_AVRO
