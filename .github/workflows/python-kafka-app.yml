name: python-kafka-app

on: [push]

env:
  TOPIC: t20
  CONFLUENT_BOOTSTRAP_SERVERS: ${{ secrets.CONFLUENT_BOOTSTRAP_SERVERS }}
  CONFLUENT_API_KEY: ${{ secrets.CONFLUENT_API_KEY }}
  CONFLUENT_API_SECRET: ${{ secrets.CONFLUENT_API_SECRET }}
  # Confluent Cloud Schema Registry and AVRO
  TOPICAVRO: t21-avro
  CONFLUENT_SCHEMA_REGISTRY_URL: ${{ secrets.CONFLUENT_SCHEMA_REGISTRY_URL }}
  CONFLUENT_BASIC_AUTH_USER_INFO: ${{ secrets.CONFLUENT_BASIC_AUTH_USER_INFO }}
  DEST_WORKSPACE: ${{ github.workspace }}

jobs:

  build:

    runs-on: ubuntu-latest

    permissions:
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ghcr.io/${{ github.actor }}/python-app:latest

  unit:

    needs: build

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - name: Run Kafka client app unit test
        run: |
          docker run -t -e TOPIC=$TOPIC \
                       -v ${DEST_WORKSPACE}/configs/librdkafka.unit.config:/etc/librdkafka.config \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c '/usr/bin/producer.py -f /etc/librdkafka.config -t $TOPIC'

  local:

    needs: unit

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - name: Get cp-all-in-one
        uses: wei/wget@v1
        with:
          args: -O docker-compose.yml https://raw.githubusercontent.com/confluentinc/cp-all-in-one/latest/cp-all-in-one/docker-compose.yml

      - name: Start local Kafka cluster
        run: docker-compose up -d zookeeper broker

      - name: Sleep for 20 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'

      - name: Run Kafka client app to local cluster
        run: |
          docker run -t -e TOPIC=$TOPIC \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.local.config:/etc/librdkafka.config \
                        --net kafka-github-actions_default \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c '/usr/bin/producer.py -f /etc/librdkafka.config -t $TOPIC'
          docker run -t -e TOPIC=$TOPIC \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.local.config:/etc/librdkafka.config \
                        --net kafka-github-actions_default \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c 'timeout 10s /usr/bin/consumer.py -f /etc/librdkafka.config -t $TOPIC' \
                          || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

      - name: Test message count
        run: tests/local.sh $TOPIC

  local-avro:

    needs: local

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - name: Get cp-all-in-one
        uses: wei/wget@v1
        with:
          args: -O docker-compose.yml https://raw.githubusercontent.com/confluentinc/cp-all-in-one/latest/cp-all-in-one/docker-compose.yml

      - name: Start local Kafka cluster and Schema Registry
        run: docker-compose up -d zookeeper broker schema-registry

      - name: Sleep for 20 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'

      - name: Run Kafka client app to local cluster
        run: |
          docker run -t -e TOPIC=$TOPICAVRO \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.local-avro.config:/etc/librdkafka.config \
                        --net kafka-github-actions_default \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c '/usr/bin/producer_ccsr.py -f /etc/librdkafka.config -t $TOPICAVRO'
          docker run -t -e TOPIC=$TOPICAVRO \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.local-avro.config:/etc/librdkafka.config \
                        --net kafka-github-actions_default \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c 'timeout 10s /usr/bin/consumer_ccsr.py -f /etc/librdkafka.config -t $TOPICAVRO' \
                          || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

      - name: Test message count
        run: tests/local-avro.sh $TOPIC

  ccloud:

    needs: local

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: franzbischoff/replace_envs@v1
        with:
          from_file: 'configs/librdkafka.ccloud.config'
          to_file: 'configs/librdkafka.ccloud.config'
          commit: 'false'

      - name: Run Kafka client app to Confluent Cloud
        run: |
          docker run -t -e TOPIC=$TOPIC \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.ccloud.config:/etc/librdkafka.config \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c '/usr/bin/producer.py -f /etc/librdkafka.config -t $TOPIC'
          docker run -t -e TOPIC=$TOPIC \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.ccloud.config:/etc/librdkafka.config \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c 'timeout 10s /usr/bin/consumer.py -f /etc/librdkafka.config -t $TOPIC' \
                          || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

      - name: Test message count
        run: tests/ccloud.sh $TOPIC

  ccloud-avro:

    needs: ccloud

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: franzbischoff/replace_envs@v1
        with:
          from_file: 'configs/librdkafka.ccloud-avro.config'
          to_file: 'configs/librdkafka.ccloud-avro.config'
          commit: 'false'

      - name: Run Kafka client app to Confluent Cloud
        run: |
          docker run -t -e TOPICAVRO=$TOPICAVRO \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.ccloud-avro.config:/etc/librdkafka.config \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c '/usr/bin/producer_ccsr.py -f /etc/librdkafka.config -t $TOPICAVRO'
          docker run -t -e TOPICAVRO=$TOPICAVRO \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.ccloud-avro.config:/etc/librdkafka.config \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c 'timeout 10s /usr/bin/consumer_ccsr.py -f /etc/librdkafka.config -t $TOPICAVRO' \
                          || code=$?; if [[ $code -ne 124 && $code -ne 0 ]]; then exit $code; fi

      - name: Test message count
        run: tests/ccloud-avro.sh $TOPICAVRO

  ccloud-schema-compatibility:

    needs: ccloud-avro

    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: franzbischoff/replace_envs@v1
        with:
          from_file: 'configs/librdkafka.ccloud-avro.config'
          to_file: 'configs/librdkafka.ccloud-avro.config'
          commit: 'false'

      - name: Test compatibility of new schema
        run: |
          docker run -t -e TOPICAVRO=$TOPICAVRO \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.ccloud-avro.config:/etc/librdkafka.config \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c '/usr/bin/test_schema_compatibility.py -f /etc/librdkafka.config -t $TOPICAVRO -s /etc/Count-pass.avsc'
          # The -e flag sets expected_pass to False
          docker run -t -e TOPICAVRO=$TOPICAVRO \
                        -v ${DEST_WORKSPACE}/configs/librdkafka.ccloud-avro.config:/etc/librdkafka.config \
                        --name my-python-app --rm ghcr.io/${{ github.actor }}/python-app:latest \
                        bash -c '/usr/bin/test_schema_compatibility.py -f /etc/librdkafka.config -t $TOPICAVRO -s /etc/Count-fail.avsc -e'
